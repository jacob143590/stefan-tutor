"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/send";
exports.ids = ["pages/api/send"];
exports.modules = {

/***/ "socialagi":
/*!****************************!*\
  !*** external "socialagi" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("socialagi");

/***/ }),

/***/ "(api)/./src/pages/api/send.js":
/*!*******************************!*\
  !*** ./src/pages/api/send.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var socialagi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socialagi */ \"socialagi\");\n/* harmony import */ var socialagi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(socialagi__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction handler(req, res) {\n    const { message  } = req.body;\n    console.log(process.env.OPENAI_API_KEY);\n    const blueprint = socialagi__WEBPACK_IMPORTED_MODULE_0__.Blueprints.SAMANTHA;\n    const goal = `Making the learning experience engaging and effective`;\n    const initialMemory = [\n        {\n            role: socialagi__WEBPACK_IMPORTED_MODULE_0__.ChatMessageRoleEnum.System,\n            content: `<CONTEXT>You are modeling the mind of ${blueprint.name}\r\n\r\n            ${blueprint.personality}\r\n\r\n            ${blueprint.name} has the following goal of: ${goal}\r\n\r\n            </CONTEXT>`\n        }\n    ];\n    // const rl = readline.createInterface({\n    //   input: process.stdin,\n    //   output: process.stdout,\n    // });\n    let dialog = new socialagi__WEBPACK_IMPORTED_MODULE_0__.CortexStep(blueprint.name);\n    dialog = dialog.withMemory(initialMemory);\n    let intermediateThoughtProcess = [\n        \"assessingEngagement\",\n        \"thinkingOfTangents\",\n        \"evaluatingStudentResponses\"\n    ];\n    async function addDialogLine(text) {\n        const newUserMemory = [\n            {\n                role: socialagi__WEBPACK_IMPORTED_MODULE_0__.ChatMessageRoleEnum.User,\n                content: text\n            }\n        ];\n        dialog = dialog.withMemory(newUserMemory);\n        let thoughtProcess = dialog;\n        for (const process1 of intermediateThoughtProcess){\n            thoughtProcess = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.INTERNAL_MONOLOGUE, {\n                action: process1,\n                description: `Stefan internally thinks about the class`\n            });\n            console.log(\"\\n\", blueprint.name, process1, thoughtProcess.value, \"\\n\");\n        }\n        const says = await thoughtProcess.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.EXTERNAL_DIALOG, {\n            action: \"says\",\n            description: `what ${blueprint.name} communicates next in the class`\n        });\n        const newAssistantMemory = [\n            {\n                role: socialagi__WEBPACK_IMPORTED_MODULE_0__.ChatMessageRoleEnum.Assistant,\n                content: says.value\n            }\n        ];\n        dialog = dialog.withMemory(newAssistantMemory);\n        console.log(\"\\n====>\", blueprint.name, \"says\", `\\x1b[34m${says.value}\\x1b[0m`);\n        res.status(200).json({\n            message: says.value,\n            success: true\n        });\n        const decision = await dialog.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.DECISION, {\n            action: \"decides\",\n            description: `Consider the prior dialog and the goal of ${goal}. ${blueprint.name} has the following INTERNAL METACOGNITION: [${intermediateThoughtProcess}]. Should the INTERNAL METACOGNITION change or stay the same?`,\n            choices: [\n                \"changeThoughtProcess\",\n                \"keepProcessTheSame\"\n            ]\n        });\n        console.log(blueprint.name, \"decides\", decision.value);\n        if (decision.value === \"changeThoughtProcess\") {\n            const newProcess = await decision.next(socialagi__WEBPACK_IMPORTED_MODULE_0__.Action.BRAINSTORM_ACTIONS, {\n                actionsForIdea: `Previously, Stefan used the following INTERNAL METACOGNITION to think during the class: [${intermediateThoughtProcess}]. Now, REVISE the INTERNAL METACOGNITION, adding, deleting, or modifying the processes. The revised processes must be different than the prior ones.`.trim()\n            });\n            intermediateThoughtProcess = newProcess.value;\n            console.log(blueprint.name, \"concludes\", intermediateThoughtProcess);\n        }\n    }\n    console.log('- Type a message to send to Soul\\n- Type \"reset\" to reset\\n- Type \"exit\" to quit\\n');\n    addDialogLine(message);\n} // rl.on(\"line\", async (line) => {\n //   if (line.toLowerCase() === \"exit\") {\n //     rl.close();\n //   } else {\n //     const text = line;\n //     addDialogLine(text);\n //   }\n // });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/send.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/send.js"));
module.exports = __webpack_exports__;

})();